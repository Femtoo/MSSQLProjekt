@page "/Workers/list"
@using DataAccess.IRepository;
@using Models;
@inject NavigationManager NavigationManager
@inject IUnitOfWork _db

<MudDataGrid T="Worker" MultiSelection="true" Items="@Workers" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Workers List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="d-block" OnClick="ToggleOpen">Add Worker</MudButton>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Worker" />
        <PropertyColumn Property="x => x.Id" Title="Id" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Surename" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Worker" />
    </PagerContent>
</MudDataGrid>

<MudPopover Open="@_isOpen" Fixed="true" Class="d-inline-block pa-10" AnchorOrigin="Origin.CenterCenter" TransformOrigin="@Origin.BottomCenter">
    <div class="d-block pa-2">
        <MudTextField @bind-Value="worker.Name" Label="Worker Name" Variant="Variant.Outlined" Class="d-block"></MudTextField>
    </div>
    <div class="d-block pa-2">
        <MudTextField @bind-Value="worker.Surename" Label="Worker Surename" Variant="Variant.Outlined" Class="d-block"></MudTextField>
    </div>
    <div class="button-box col-lg-12">
        <div class="d-block pa-2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="d-block" OnClick="OnSubmit">Add New Worker</MudButton>
        </div>
        <div class="d-block pa-2">
            <MudButton Variant="Variant.Filled" Color="Color.Error" Class="d-block" OnClick="ToggleOpen">Close</MudButton>
        </div>
    </div>
    <div class="text-danger">
        <span>@errorMessage</span>
    </div>
</MudPopover>

@code {
    private IEnumerable<Worker> Workers = new List<Worker>();
    private string _searchString;
    private List<string> _events = new();
    Worker worker = new Worker();
    public bool _isOpen;
    private string errorMessage = string.Empty;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    // quick filter - filter gobally across multiple columns with the same input
    private Func<Worker, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Surename.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Workers = await _db.WorkerRepository.GetAll();
    }

    async Task OnSubmit()
    {
        _db.WorkerRepository.Add(worker);
        await _db.WorkerRepository.SaveChangesAsync();

        Workers = await _db.WorkerRepository.GetAll();

        ToggleOpen();
        worker = new Worker();
    }
}